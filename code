// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract MyBank{
    address private owner;
    uint public balance;
    constructor(){
        owner=msg.sender;
        balance=0;
    }
    function deposit(uint amount) public{
        require(amount>0,"add amount");
        balance+=amount;
    }
    function withdraw(uint amount) public {
        require(msg.sender==owner,"owner can withdraw");
        require(amount<=balance,"balance not sufficient");
        balance -=amount;
    } 
    function transfer(address payable recipient,uint amount) public{
        require(recipient!=address(0),"can't transfer");
        require(msg.sender==owner,"owner can transfer");
        require(amount<=balance,"balance not sufficient");
        balance -=amount;
        recipient.transfer(amount);


    }
    function Assert() public  pure{
        uint x=5;
        assert(x==5);
        x=10;
        assert(x==5);
    }
    function Revert() public pure{
        revert("this will never revert");
    }

}
